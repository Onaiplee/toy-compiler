Program ::= Program id ; [TypeDefinitions] [VariableDeclarations]

                 [SubprogramDeclarations] CompoundStatement .

TypeDefinitions ::= type TypeDefinition ; {TypeDefinition ; }

VariableDeclarations ::= var VariableDeclaration ; {VariableDeclaration ; }

SubprogramDeclarations ::= {(ProcedureDeclaration | FunctionDeclaration) ; }

TypeDefinition ::= id = Type

VariableDeclaration ::= IdentifierList : Type

ProcedureDeclaration ::= Procedure id ( FormalParameterList ) ; ( Block | forward )

FunctionDeclaration ::= function id ( FormalParameterList ) : ResultType ; ( Block | forward )

FormalParameterList ::= [IdentifierList : Type { ; IdentifierList : Type } ]

Block ::= [VariableDeclarations] CompoundStatement

CompoundStatement ::= begin StatementSequence end

StatementSequence ::= Statement { ; Statement }

Statement ::= SimpleStatement | StructuredStatement

SimpleStatement ::= [ (AssignmentStatement | ProcedureStatement) ]

AssignmentStatement ::= Variable := Expression

ProcedureStatement ::= id ( ActualParameterList )

StructuredStatement ::= CompoundStatement

           | if Expression then Statement [ else Statement ]

           | while Expression do Statement

           | for id := Expression to Expression do Statement

Type ::= id | array [ constant .. constant ] of Type | record FieldList end

ResultType ::= id

Fieldlist ::= [ IdentifierList : Type { ; IdentifierList : Type } ]

Constant ::= [ sign ] int

Expression ::= SimpleExpression [ RelationalOp SimpleExpression ]

RelationalOp ::= < | <= | > | >= | <> | =

SimpleExpression ::= [ sign ] Term { AddOp Term }

AddOp ::= + | - | or

Term ::= Factor { MulOp Factor }

MulOp ::= * | div | mod | and

Factor ::= int | string | Variable | FunctionReference | not Factor | ( Expression )

FunctionReference ::= id ( ActualParameterList )

Variable ::= id ComponentSelection

ComponentSelection ::= [ ( . id ComponentSelection | [ expression ] ComponentSelection ) ]

ActualParameterList ::= [ Expression { , Expression } ]

IdentifierList ::= id { , id }

Sign ::= + | -
